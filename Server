#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

int main(){

  char *ip = "192.168.56.108";
  int port = 1999;

  int server_sock, client_sock,read_size;
  struct sockaddr_in server_addr, client_addr;
  socklen_t addr_size;
  char buffer[1024],server_reply[1024],server_exit[1024];
  int n;

  server_sock = socket(AF_INET, SOCK_STREAM, 0);
  if (server_sock < 0){
    perror("# Socket error");
    exit(1);
  }
  printf("# Server socket created.\n\n");

  memset(&server_addr, '\0', sizeof(server_addr));
  server_addr.sin_family = AF_INET;
  server_addr.sin_port = port;
  server_addr.sin_addr.s_addr = inet_addr(ip);

  n = bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr));
  if (n < 0){
    perror("[# Bind error");
    exit(1);
  }
  printf("# Bind to port: %d\n\n", port);

  listen(server_sock, 5);
  printf("Listening...\n");
	
	addr_size = sizeof(client_addr);
    client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &addr_size);
    printf("[+]Client connected.\n\n");
	
  while( (read_size = recv(client_sock, buffer, sizeof(buffer), 0) > 0))
  {
	printf("Client: %s\n\n",buffer);
	if(strcmp(buffer,"Exit")== 0)
	{
		puts("Client disconnected");
		fflush(stdout);
		strcpy(server_reply, "Exit");
		send(client_sock, server_reply, strlen(server_reply), 0);
		break;
	}
	else if(read_size == -1)
	{
		perror("recv failed");
	}
    strcpy(server_reply, "Message received\n\n");
    printf("%s\n\n", server_reply);
    send(client_sock, server_reply, strlen(server_reply), 0);
    
	
	
	
	
	
	bzero(buffer, 1024);
	//x
  }
	close(client_sock);
    printf("Client successfully disconnected. :)\n\n");
	
  return 0;
}
